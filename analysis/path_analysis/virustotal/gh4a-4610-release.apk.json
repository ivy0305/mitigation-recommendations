{
  "data": {
    "Zenbox Linux": {
      "tactics": [
        {
          "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
          "techniques": [
            {
              "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Reads CPU information from /sys indicative of miner or evasive malware"
                },
                {
                  "severity": "INFO",
                  "description": "Reads system information from the proc file system"
                },
                {
                  "severity": "INFO",
                  "description": "Reads CPU information from /proc indicative of miner or evasive malware"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1082/",
              "id": "T1082",
              "name": "System Information Discovery"
            },
            {
              "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Uses the \"uname\" system call to query kernel version information (possible evasion)"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1518/001/",
              "id": "T1518.001",
              "name": "Security Software Discovery"
            }
          ],
          "link": "https://attack.mitre.org/tactics/TA0007/",
          "id": "TA0007",
          "name": "Discovery"
        },
        {
          "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
          "techniques": [
            {
              "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls \u2013a for Linux and macOS).\nOn Linux and Mac, users can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name   . Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable.\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Creates hidden files, links and/or directories"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1564/001/",
              "id": "T1564.001",
              "name": "Hidden Files and Directories"
            }
          ],
          "link": "https://attack.mitre.org/tactics/TA0005/",
          "id": "TA0005",
          "name": "Defense Evasion"
        }
      ]
    },
    "Zenbox android": {
      "tactics": [
        {
          "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques that allow the adversary to gain knowledge about the characteristics of the mobile device and potentially other networked systems. When adversaries gain access to a new system, they must orient themselves to what they now have control of and what benefits operating from that system give to their current objective or overall goals during the intrusion. The operating system may provide capabilities that aid in this post-compromise information-gathering phase.",
          "techniques": [
            {
              "description": "Adversaries may attempt to get a listing of network connections to or from the compromised device they are currently accessing or from remote systems by querying for information over the network. \nThis is typically accomplished by utilizing device APIs to collect information about nearby networks, such as Wi-Fi, Bluetooth, and cellular tower connections. On Android, this can be done by querying the respective APIs: \n\n\nWifiInfo for information about the current Wi-Fi connection, as well as nearby Wi-Fi networks. Querying the WiFiInfo API requires the application to hold the ACCESS_FINE_LOCATION permission. \n\n\nBluetoothAdapter for information about Bluetooth devices, which also requires the application to hold several permissions granted by the user at runtime. \n\n\nFor Android versions prior to Q, applications can use the TelephonyManager.getNeighboringCellInfo() method. For Q and later, applications can use the TelephonyManager.getAllCellInfo() method. Both methods require the application hold the ACCESS_FINE_LOCATION permission.\n\n",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Checks an internet connection is available"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1421/",
              "id": "T1421",
              "name": "System Network Connections Discovery"
            },
            {
              "description": "Adversaries may track a device\u2019s physical location through use of standard operating system APIs via malicious or exploited applications on the compromised device. \nOn Android, applications holding the ACCESS_COAURSE_LOCATION or ACCESS_FINE_LOCATION permissions provide access to the device\u2019s physical location. On Android 10 and up, declaration of the ACCESS_BACKGROUND_LOCATION permission in an application\u2019s manifest will allow applications to request location access even when the application is running in the background. Some adversaries have utilized integration of Baidu map services to retrieve geographical location once the location access permissions had been obtained. \nOn iOS, applications must include the NSLocationWhenInUseUsageDescription, NSLocationAlwaysAndWhenInUseUsageDescription, and/or NSLocationAlwaysUsageDescription keys in their Info.plist file depending on the extent of requested access to location information. On iOS 8.0 and up, applications call requestWhenInUseAuthorization() to request access to location information when the application is in use or requestAlwaysAuthorization() to request access to location information regardless of whether the application is in use. With elevated privileges, an adversary may be able to access location data without explicit user consent with the com.apple.locationd.preauthorized entitlement key.",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Queries the phones location (GPS)"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1430/",
              "id": "T1430",
              "name": "Location Tracking"
            },
            {
              "description": "Adversaries may attempt to get information about running processes on a device. Information obtained could be used to gain an understanding of common software/applications running on devices within a network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. \nRecent Android security enhancements have made it more difficult to obtain a list of running processes. On Android 7 and later, there is no way for an application to obtain the process list without abusing elevated privileges. This is due to the Android kernel utilizing the hidepid mount feature. Prior to Android 7, applications could utilize the ps command or examine the /proc directory on the device. \nIn iOS, applications have previously been able to use the sysctl command to obtain a list of running processes. This functionality has been removed in later iOS versions. ",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Queries list of running processes/tasks"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1424/",
              "id": "T1424",
              "name": "Process Discovery"
            },
            {
              "description": "Adversaries may attempt to get detailed information about a device\u2019s operating system and hardware, including versions, patches, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not to fully infects the target and/or attempts specific actions. \nOn Android, much of this information is programmatically accessible to applications through the android.os.Build class.  iOS is much more restrictive with what information is visible to applications. Typically, applications will only be able to query the device model and which version of iOS it is running. ",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Queries several sensitive phone informations"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1426/",
              "id": "T1426",
              "name": "System Information Discovery"
            }
          ],
          "link": "https://attack.mitre.org/tactics/TA0032/",
          "id": "TA0032",
          "name": "Discovery"
        },
        {
          "description": " The adversary is trying to avoid being detected.\n\nDefense evasion consists of techniques an adversary may use to evade detection or avoid other defenses. Sometimes these actions are the same as or variations of techniques in other categories that have the added benefit of subverting a particular defense or mitigation. Defense evasion may be considered a set of attributes the adversary applies to all other phases of the operation.",
          "techniques": [
            {
              "description": "Adversaries may wipe a device or delete individual files in order to manipulate external outcomes or hide activity. An application must have administrator access to fully wipe the device, while individual files may not require special permissions to delete depending on their storage location. \nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The impact file deletion will have depends on the type of data as well as the goals and objectives of the adversary, but can include deleting update files to evade detection or deleting attacker-specified files for impact.",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Lists and deletes files in the same context"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1447/",
              "id": "T1447",
              "name": "Delete Device Data"
            }
          ],
          "link": "https://attack.mitre.org/tactics/TA0030/",
          "id": "TA0030",
          "name": "Defense Evasion"
        },
        {
          "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.",
          "techniques": [
            {
              "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Performs DNS lookups"
                },
                {
                  "severity": "INFO",
                  "description": "Uses HTTPS"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1071/",
              "id": "T1071",
              "name": "Application Layer Protocol"
            },
            {
              "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Performs DNS lookups"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1095/",
              "id": "T1095",
              "name": "Non-Application Layer Protocol"
            },
            {
              "description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Uses HTTPS"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1573/",
              "id": "T1573",
              "name": "Encrypted Channel"
            }
          ],
          "link": "https://attack.mitre.org/tactics/TA0011/",
          "id": "TA0011",
          "name": "Command and Control"
        },
        {
          "description": "The adversary is trying to manipulate, interrupt, or destroy your devices and data.\n\nThe impact tactic consists of techniques used by the adversary to execute his or her mission objectives but that do not cleanly fit into another category such as Collection. Mission objectives vary based on each adversary's goals, but examples include toll fraud, destruction of device data, or locking the user out of his or her device until a ransom is paid.",
          "techniques": [
            {
              "description": "Adversaries may wipe a device or delete individual files in order to manipulate external outcomes or hide activity. An application must have administrator access to fully wipe the device, while individual files may not require special permissions to delete depending on their storage location. \nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The impact file deletion will have depends on the type of data as well as the goals and objectives of the adversary, but can include deleting update files to evade detection or deleting attacker-specified files for impact.",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Lists and deletes files in the same context"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1447/",
              "id": "T1447",
              "name": "Delete Device Data"
            }
          ],
          "link": "https://attack.mitre.org/tactics/TA0034/",
          "id": "TA0034",
          "name": "Impact"
        },
        {
          "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques used to identify and gather information, such as sensitive files, from a target network prior to exfiltration. This category also covers locations on a system or network where the adversary may look for information to exfiltrate.",
          "techniques": [
            {
              "description": "Adversaries may use device sensors to collect information about nearby networks, such as Wi-Fi and Bluetooth.",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Checks an internet connection is available"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1507/",
              "id": "T1507",
              "name": "Network Information Discovery"
            },
            {
              "description": "Adversaries may track a device\u2019s physical location through use of standard operating system APIs via malicious or exploited applications on the compromised device. \nOn Android, applications holding the ACCESS_COAURSE_LOCATION or ACCESS_FINE_LOCATION permissions provide access to the device\u2019s physical location. On Android 10 and up, declaration of the ACCESS_BACKGROUND_LOCATION permission in an application\u2019s manifest will allow applications to request location access even when the application is running in the background. Some adversaries have utilized integration of Baidu map services to retrieve geographical location once the location access permissions had been obtained. \nOn iOS, applications must include the NSLocationWhenInUseUsageDescription, NSLocationAlwaysAndWhenInUseUsageDescription, and/or NSLocationAlwaysUsageDescription keys in their Info.plist file depending on the extent of requested access to location information. On iOS 8.0 and up, applications call requestWhenInUseAuthorization() to request access to location information when the application is in use or requestAlwaysAuthorization() to request access to location information regardless of whether the application is in use. With elevated privileges, an adversary may be able to access location data without explicit user consent with the com.apple.locationd.preauthorized entitlement key.",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Queries the phones location (GPS)"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1430/",
              "id": "T1430",
              "name": "Location Tracking"
            }
          ],
          "link": "https://attack.mitre.org/tactics/TA0035/",
          "id": "TA0035",
          "name": "Collection"
        }
      ]
    }
  },
  "links": {
    "self": "https://www.virustotal.com/api/v3/files/d89abecaf44375d10933f8da58d6fbbe/behaviour_mitre_trees"
  },
  "md5": "d89abecaf44375d10933f8da58d6fbbe"
}