{
  "data": {
    "Zenbox android": {
      "tactics": [
        {
          "description": "The adversary is trying to steal account names, passwords, or other secrets that enable access to resources.\n\nCredential access represents techniques that can be used by adversaries to obtain access to or control over passwords, tokens, cryptographic keys, or other values that could be used by an adversary to gain unauthorized access to resources. Credential access allows the adversary to assume the identity of an account, with all of that account's permissions on the system and network, and makes it harder for defenders to detect the adversary. With sufficient access within a network, an adversary can create accounts for later use within the environment.",
          "techniques": [
            {
              "description": "Adversaries may abuse clipboard manager APIs to obtain sensitive information copied to the device clipboard. For example, passwords being copied and pasted from a password manager application could be captured by a malicious application installed on the device. \nOn Android, applications can use the ClipboardManager.OnPrimaryClipChangedListener() API to register as a listener and monitor the clipboard for changes. However, starting in Android 10, this can only be used if the application is in the foreground, or is set as the device\u2019s default input method editor (IME). \nOn iOS, this can be accomplished by accessing the UIPasteboard.general.string field. However, starting in iOS 14, upon accessing the clipboard, the user will be shown a system notification if the accessed text originated in a different application. For example, if the user copies the text of an iMessage from the Messages application, the notification will read \u201capplication_name has pasted from Messages\u201d when the text was pasted in a different application.",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Registers a clipboard change listener (to get access to clipboard data)"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1414/",
              "id": "T1414",
              "name": "Clipboard Data"
            }
          ],
          "link": "https://attack.mitre.org/tactics/TA0031/",
          "id": "TA0031",
          "name": "Credential Access"
        },
        {
          "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.",
          "techniques": [
            {
              "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Uses HTTPS"
                },
                {
                  "severity": "INFO",
                  "description": "Performs DNS lookups"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1071/",
              "id": "T1071",
              "name": "Application Layer Protocol"
            },
            {
              "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Performs DNS lookups"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1095/",
              "id": "T1095",
              "name": "Non-Application Layer Protocol"
            },
            {
              "description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Uses HTTPS"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1573/",
              "id": "T1573",
              "name": "Encrypted Channel"
            }
          ],
          "link": "https://attack.mitre.org/tactics/TA0011/",
          "id": "TA0011",
          "name": "Command and Control"
        },
        {
          "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques used to identify and gather information, such as sensitive files, from a target network prior to exfiltration. This category also covers locations on a system or network where the adversary may look for information to exfiltrate.",
          "techniques": [
            {
              "description": "Adversaries may abuse clipboard manager APIs to obtain sensitive information copied to the device clipboard. For example, passwords being copied and pasted from a password manager application could be captured by a malicious application installed on the device. \nOn Android, applications can use the ClipboardManager.OnPrimaryClipChangedListener() API to register as a listener and monitor the clipboard for changes. However, starting in Android 10, this can only be used if the application is in the foreground, or is set as the device\u2019s default input method editor (IME). \nOn iOS, this can be accomplished by accessing the UIPasteboard.general.string field. However, starting in iOS 14, upon accessing the clipboard, the user will be shown a system notification if the accessed text originated in a different application. For example, if the user copies the text of an iMessage from the Messages application, the notification will read \u201capplication_name has pasted from Messages\u201d when the text was pasted in a different application.",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Registers a clipboard change listener (to get access to clipboard data)"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1414/",
              "id": "T1414",
              "name": "Clipboard Data"
            },
            {
              "description": "Adversaries may capture audio to collect information by leveraging standard operating system APIs of a mobile device. Examples of audio information adversaries may target include user conversations, surroundings, phone calls, or other sensitive information. \nAndroid and iOS, by default, require that applications request device microphone access from the user.  \nOn Android devices, applications must hold the RECORD_AUDIO permission to access the microphone or the CAPTURE_AUDIO_OUTPUT permission to access audio output. Because Android does not allow third-party applications to hold the CAPTURE_AUDIO_OUTPUT permission by default, only privileged applications, such as those distributed by Google or the device vendor, can access audio output. However, adversaries may be able to gain this access after successfully elevating their privileges. With the CAPTURE_AUDIO_OUTPUT permission, adversaries may pass the MediaRecorder.AudioSource.VOICE_CALL constant to MediaRecorder.setAudioOutput, allowing capture of both voice call uplink and downlink. \nOn iOS devices, applications must include the NSMicrophoneUsageDescription key in their Info.plist file to access the microphone.",
              "signatures": [
                {
                  "severity": "INFO",
                  "description": "Accesses the audio/media managers"
                },
                {
                  "severity": "INFO",
                  "description": "Records audio/media"
                }
              ],
              "link": "https://attack.mitre.org/techniques/T1429/",
              "id": "T1429",
              "name": "Audio Capture"
            }
          ],
          "link": "https://attack.mitre.org/tactics/TA0035/",
          "id": "TA0035",
          "name": "Collection"
        }
      ]
    }
  },
  "links": {
    "self": "https://www.virustotal.com/api/v3/files/fe079a743fcfbba8504dcf5f51fbde83/behaviour_mitre_trees"
  },
  "md5": "fe079a743fcfbba8504dcf5f51fbde83"
}