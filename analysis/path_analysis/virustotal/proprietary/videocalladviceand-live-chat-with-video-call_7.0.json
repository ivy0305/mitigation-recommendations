{
    "data": {
        "Zenbox android": {
            "tactics": [
                {
                    "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques that allow the adversary to gain knowledge about the characteristics of the mobile device and potentially other networked systems. When adversaries gain access to a new system, they must orient themselves to what they now have control of and what benefits operating from that system give to their current objective or overall goals during the intrusion. The operating system may provide capabilities that aid in this post-compromise information-gathering phase.",
                    "techniques": [
                        {
                            "description": "Adversaries may track a device\u2019s physical location through use of standard operating system APIs via malicious or exploited applications on the compromised device. \nOn Android, applications holding the ACCESS_COAURSE_LOCATION or ACCESS_FINE_LOCATION permissions provide access to the device\u2019s physical location. On Android 10 and up, declaration of the ACCESS_BACKGROUND_LOCATION permission in an application\u2019s manifest will allow applications to request location access even when the application is running in the background. Some adversaries have utilized integration of Baidu map services to retrieve geographical location once the location access permissions had been obtained. \nOn iOS, applications must include the NSLocationWhenInUseUsageDescription, NSLocationAlwaysAndWhenInUseUsageDescription, and/or NSLocationAlwaysUsageDescription keys in their Info.plist file depending on the extent of requested access to location information. On iOS 8.0 and up, applications call requestWhenInUseAuthorization() to request access to location information when the application is in use or requestAlwaysAuthorization() to request access to location information regardless of whether the application is in use. With elevated privileges, an adversary may be able to access location data without explicit user consent with the com.apple.locationd.preauthorized entitlement key.",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Queries the phones location (GPS)"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1430/",
                            "id": "T1430",
                            "name": "Location Tracking"
                        },
                        {
                            "description": "Adversaries may attempt to get information about running processes on a device. Information obtained could be used to gain an understanding of common software/applications running on devices within a network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. \nRecent Android security enhancements have made it more difficult to obtain a list of running processes. On Android 7 and later, there is no way for an application to obtain the process list without abusing elevated privileges. This is due to the Android kernel utilizing the hidepid mount feature. Prior to Android 7, applications could utilize the ps command or examine the /proc directory on the device. \nIn iOS, applications have previously been able to use the sysctl command to obtain a list of running processes. This functionality has been removed in later iOS versions. ",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Queries list of running processes/tasks"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1424/",
                            "id": "T1424",
                            "name": "Process Discovery"
                        },
                        {
                            "description": "Adversaries may attempt to get a listing of network connections to or from the compromised device they are currently accessing or from remote systems by querying for information over the network. \nThis is typically accomplished by utilizing device APIs to collect information about nearby networks, such as Wi-Fi, Bluetooth, and cellular tower connections. On Android, this can be done by querying the respective APIs: \n\n\nWifiInfo for information about the current Wi-Fi connection, as well as nearby Wi-Fi networks. Querying the WiFiInfo API requires the application to hold the ACCESS_FINE_LOCATION permission. \n\n\nBluetoothAdapter for information about Bluetooth devices, which also requires the application to hold several permissions granted by the user at runtime. \n\n\nFor Android versions prior to Q, applications can use the TelephonyManager.getNeighboringCellInfo() method. For Q and later, applications can use the TelephonyManager.getAllCellInfo() method. Both methods require the application hold the ACCESS_FINE_LOCATION permission.\n\n",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Checks an internet connection is available"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1421/",
                            "id": "T1421",
                            "name": "System Network Connections Discovery"
                        },
                        {
                            "description": "Adversaries may attempt to get detailed information about a device\u2019s operating system and hardware, including versions, patches, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not to fully infects the target and/or attempts specific actions. \nOn Android, much of this information is programmatically accessible to applications through the android.os.Build class.  iOS is much more restrictive with what information is visible to applications. Typically, applications will only be able to query the device model and which version of iOS it is running. ",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Queries several sensitive phone informations"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1426/",
                            "id": "T1426",
                            "name": "System Information Discovery"
                        },
                        {
                            "description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of operating systems they access or through information discovery of remote systems. \nOn Android, details of onboard network interfaces are accessible to apps through the java.net.NetworkInterface class. Previously, the Android TelephonyManager class could be used to gather telephony-related device identifiers, information such as the IMSI, IMEI, and phone number. However, starting with Android 10, only preloaded, carrier, the default SMS, or device and profile owner applications can access the telephony-related device identifiers. \nOn iOS, gathering network configuration information is not possible without root access. \nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. ",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Checks if a SIM card is installed"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Queries the SIM provider numeric MCC+MNC (mobile country code + mobile network code)"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1422/",
                            "id": "T1422",
                            "name": "System Network Configuration Discovery"
                        },
                        {
                            "description": "Malicious applications may attempt to detect their operating environment prior to fully executing their payloads. These checks are often used to ensure the application is not running within an analysis environment such as a sandbox used for application vetting, security research, or reverse engineering. \nAdversaries may use many different checks such as physical sensors, location, and system properties to fingerprint emulators and sandbox environments. Adversaries may access android.os.SystemProperties via Java reflection to obtain specific system information. Standard values such as phone number, IMEI, IMSI, device IDs, and device drivers may be checked against default signatures of common sandboxes.",
                            "signatures": [
                                {
                                    "severity": "LOW",
                                    "description": "Checks if app is currently debugged"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1523/",
                            "id": "T1523",
                            "name": "Evade Analysis Environment"
                        }
                    ],
                    "link": "https://attack.mitre.org/tactics/TA0032/",
                    "id": "TA0032",
                    "name": "Discovery"
                },
                {
                    "description": " The adversary is trying to avoid being detected.\n\nDefense evasion consists of techniques an adversary may use to evade detection or avoid other defenses. Sometimes these actions are the same as or variations of techniques in other categories that have the added benefit of subverting a particular defense or mitigation. Defense evasion may be considered a set of attributes the adversary applies to all other phases of the operation.",
                    "techniques": [
                        {
                            "description": "Adversaries may attempt to make a payload or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the device or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Portions of files can also be encoded to hide the plaintext strings that would otherwise help defenders with discovery. Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. ",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Obfuscates method names"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1406/",
                            "id": "T1406",
                            "name": "Obfuscated Files or Information"
                        },
                        {
                            "description": "Malicious applications may attempt to detect their operating environment prior to fully executing their payloads. These checks are often used to ensure the application is not running within an analysis environment such as a sandbox used for application vetting, security research, or reverse engineering. \nAdversaries may use many different checks such as physical sensors, location, and system properties to fingerprint emulators and sandbox environments. Adversaries may access android.os.SystemProperties via Java reflection to obtain specific system information. Standard values such as phone number, IMEI, IMSI, device IDs, and device drivers may be checked against default signatures of common sandboxes.",
                            "signatures": [
                                {
                                    "severity": "LOW",
                                    "description": "Checks if app is currently debugged"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1523/",
                            "id": "T1523",
                            "name": "Evade Analysis Environment"
                        },
                        {
                            "description": "Adversaries may wipe a device or delete individual files in order to manipulate external outcomes or hide activity. An application must have administrator access to fully wipe the device, while individual files may not require special permissions to delete depending on their storage location. \nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The impact file deletion will have depends on the type of data as well as the goals and objectives of the adversary, but can include deleting update files to evade detection or deleting attacker-specified files for impact.",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Lists and deletes files in the same context"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1447/",
                            "id": "T1447",
                            "name": "Delete Device Data"
                        }
                    ],
                    "link": "https://attack.mitre.org/tactics/TA0030/",
                    "id": "TA0030",
                    "name": "Defense Evasion"
                },
                {
                    "description": "The adversary is trying to manipulate, interrupt, or destroy your devices and data.\n\nThe impact tactic consists of techniques used by the adversary to execute his or her mission objectives but that do not cleanly fit into another category such as Collection. Mission objectives vary based on each adversary's goals, but examples include toll fraud, destruction of device data, or locking the user out of his or her device until a ransom is paid.",
                    "techniques": [
                        {
                            "description": "Adversaries may wipe a device or delete individual files in order to manipulate external outcomes or hide activity. An application must have administrator access to fully wipe the device, while individual files may not require special permissions to delete depending on their storage location. \nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The impact file deletion will have depends on the type of data as well as the goals and objectives of the adversary, but can include deleting update files to evade detection or deleting attacker-specified files for impact.",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Lists and deletes files in the same context"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1447/",
                            "id": "T1447",
                            "name": "Delete Device Data"
                        }
                    ],
                    "link": "https://attack.mitre.org/tactics/TA0034/",
                    "id": "TA0034",
                    "name": "Impact"
                },
                {
                    "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques used to identify and gather information, such as sensitive files, from a target network prior to exfiltration. This category also covers locations on a system or network where the adversary may look for information to exfiltrate.",
                    "techniques": [
                        {
                            "description": "Adversaries may use device sensors to collect information about nearby networks, such as Wi-Fi and Bluetooth.",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Checks an internet connection is available"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Scans for WIFI networks"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Queries the list of configured WIFI access points"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Scans for Bluetooth devices"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1507/",
                            "id": "T1507",
                            "name": "Network Information Discovery"
                        },
                        {
                            "description": "Adversaries may track a device\u2019s physical location through use of standard operating system APIs via malicious or exploited applications on the compromised device. \nOn Android, applications holding the ACCESS_COAURSE_LOCATION or ACCESS_FINE_LOCATION permissions provide access to the device\u2019s physical location. On Android 10 and up, declaration of the ACCESS_BACKGROUND_LOCATION permission in an application\u2019s manifest will allow applications to request location access even when the application is running in the background. Some adversaries have utilized integration of Baidu map services to retrieve geographical location once the location access permissions had been obtained. \nOn iOS, applications must include the NSLocationWhenInUseUsageDescription, NSLocationAlwaysAndWhenInUseUsageDescription, and/or NSLocationAlwaysUsageDescription keys in their Info.plist file depending on the extent of requested access to location information. On iOS 8.0 and up, applications call requestWhenInUseAuthorization() to request access to location information when the application is in use or requestAlwaysAuthorization() to request access to location information regardless of whether the application is in use. With elevated privileges, an adversary may be able to access location data without explicit user consent with the com.apple.locationd.preauthorized entitlement key.",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Queries the phones location (GPS)"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1430/",
                            "id": "T1430",
                            "name": "Location Tracking"
                        },
                        {
                            "description": "Adversaries may capture audio to collect information by leveraging standard operating system APIs of a mobile device. Examples of audio information adversaries may target include user conversations, surroundings, phone calls, or other sensitive information. \nAndroid and iOS, by default, require that applications request device microphone access from the user.  \nOn Android devices, applications must hold the RECORD_AUDIO permission to access the microphone or the CAPTURE_AUDIO_OUTPUT permission to access audio output. Because Android does not allow third-party applications to hold the CAPTURE_AUDIO_OUTPUT permission by default, only privileged applications, such as those distributed by Google or the device vendor, can access audio output. However, adversaries may be able to gain this access after successfully elevating their privileges. With the CAPTURE_AUDIO_OUTPUT permission, adversaries may pass the MediaRecorder.AudioSource.VOICE_CALL constant to MediaRecorder.setAudioOutput, allowing capture of both voice call uplink and downlink. \nOn iOS devices, applications must include the NSMicrophoneUsageDescription key in their Info.plist file to access the microphone.",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Accesses the audio/media managers"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Has permission to record audio in the background"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Records audio/media"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1429/",
                            "id": "T1429",
                            "name": "Audio Capture"
                        }
                    ],
                    "link": "https://attack.mitre.org/tactics/TA0035/",
                    "id": "TA0035",
                    "name": "Collection"
                },
                {
                    "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
                    "techniques": [
                        {
                            "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "May try to detect the virtual machine to hinder analysis (VM artifact strings found in memory)"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1518/001/",
                            "id": "T1518.001",
                            "name": "Security Software Discovery"
                        },
                        {
                            "description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.\nAdversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. show ip route, show ip interface).\nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. ",
                            "signatures": [
                                {
                                    "severity": "LOW",
                                    "description": "Uses the command line tool ping to scan for other devices in the same network"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1016/",
                            "id": "T1016",
                            "name": "System Network Configuration Discovery"
                        }
                    ],
                    "link": "https://attack.mitre.org/tactics/TA0007/",
                    "id": "TA0007",
                    "name": "Discovery"
                },
                {
                    "description": "The adversary is trying to communicate with compromised systems to control them.\n\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.",
                    "techniques": [
                        {
                            "description": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Performs DNS lookups"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Downloads files from webservers via HTTP"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Tries to download or post to a non-existing HTTP route (HTTP/1.1 404 Not Found / 503 Service Unavailable)"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Uses HTTPS"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1071/",
                            "id": "T1071",
                            "name": "Application Layer Protocol"
                        },
                        {
                            "description": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Performs DNS lookups"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Downloads files from webservers via HTTP"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Tries to download or post to a non-existing HTTP route (HTTP/1.1 404 Not Found / 503 Service Unavailable)"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1095/",
                            "id": "T1095",
                            "name": "Non-Application Layer Protocol"
                        },
                        {
                            "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, AnyDesk, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.\nRemote access tools may be installed and used post-compromise as alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary controlled system. Installation of many remote access tools may also include persistence (ex: the tool's installation routine creates a Windows Service).\nAdmin tools such as TeamViewer have been used by several groups targeting institutions in countries of interest to the Russian state and criminal campaigns.",
                            "signatures": [
                                {
                                    "severity": "HIGH",
                                    "description": "Detected SMSWorm"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1219/",
                            "id": "T1219",
                            "name": "Remote Access Software"
                        },
                        {
                            "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). \nFiles can also be transferred using various Web Services as well as native or otherwise present tools on the victim system.\nOn Windows, adversaries may use various utilities to download tools, such as copy, finger, certutil, and PowerShell commands such as IEX(New-Object Net.WebClient).downloadString() and Invoke-WebRequest. On Linux and macOS systems, a variety of utilities also exist, such as curl, scp, sftp, tftp, rsync, finger, and wget.",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Downloads files from webservers via HTTP"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Tries to download or post to a non-existing HTTP route (HTTP/1.1 404 Not Found / 503 Service Unavailable)"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Some HTTP requests failed (404). It is likely that the sample will exhibit less behavior."
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1105/",
                            "id": "T1105",
                            "name": "Ingress Tool Transfer"
                        },
                        {
                            "description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Uses HTTPS"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1573/",
                            "id": "T1573",
                            "name": "Encrypted Channel"
                        },
                        {
                            "description": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.\nAdversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Detected TCP or UDP traffic on non-standard ports"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1571/",
                            "id": "T1571",
                            "name": "Non-Standard Port"
                        }
                    ],
                    "link": "https://attack.mitre.org/tactics/TA0011/",
                    "id": "TA0011",
                    "name": "Command and Control"
                }
            ]
        }
    },
    "links": {
        "self": "https://www.virustotal.com/api/v3/files/ecc9f3205f38312be8231d9b64b2206f4648a732fd1fbace7ee8dba427794558/behaviour_mitre_trees"
    }
}