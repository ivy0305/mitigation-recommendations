{
    "data": {
        "Zenbox Linux": {
            "tactics": [
                {
                    "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. ",
                    "techniques": [
                        {
                            "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. show version). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Reads CPU information from /proc indicative of miner or evasive malware"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Reads CPU information from /sys indicative of miner or evasive malware"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Reads system information from the proc file system"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1082/",
                            "id": "T1082",
                            "name": "System Information Discovery"
                        },
                        {
                            "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment. For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the DescribeSecurityGroups action with various request parameters. ",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Uses the \"uname\" system call to query kernel version information (possible evasion)"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1518/001/",
                            "id": "T1518.001",
                            "name": "Security Software Discovery"
                        }
                    ],
                    "link": "https://attack.mitre.org/tactics/TA0007/",
                    "id": "TA0007",
                    "name": "Discovery"
                },
                {
                    "description": "The adversary is trying to avoid being detected.\n\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
                    "techniques": [
                        {
                            "description": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: Ingress Tool Transfer) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples of built-in Command and Scripting Interpreter functions include del on Windows and rm or unlink on Linux and macOS.",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Executes the \"rm\" command used to delete files or directories"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1070/004/",
                            "id": "T1070.004",
                            "name": "File Deletion"
                        },
                        {
                            "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a \u2018hidden\u2019 file. These files don\u2019t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls \u2013a for Linux and macOS).\nOn Linux and Mac, users can mark specific files as hidden simply by putting a \u201c.\u201d as the first character in the file or folder name   . Files and folders that start with a period, \u2018.\u2019, are by default hidden from being viewed in the Finder application and standard command-line utilities like \u201cls\u201d. Users must specifically change settings to have these files viewable.\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn\u2019t clutter up the user\u2019s workspace. For example, SSH utilities create a .ssh folder that\u2019s hidden and contains the user\u2019s known hosts and keys.\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Creates hidden files, links and/or directories"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1564/001/",
                            "id": "T1564.001",
                            "name": "Hidden Files and Directories"
                        }
                    ],
                    "link": "https://attack.mitre.org/tactics/TA0005/",
                    "id": "TA0005",
                    "name": "Defense Evasion"
                }
            ]
        }
    },
    "links": {
        "self": "https://www.virustotal.com/api/v3/files/8fc8def84f844220baaf768f2dbfed820ce95d0b47eda88748af7effbc158287/behaviour_mitre_trees"
    }
}