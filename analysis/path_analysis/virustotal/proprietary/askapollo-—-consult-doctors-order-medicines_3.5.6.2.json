{
    "data": {
        "Zenbox android": {
            "tactics": [
                {
                    "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques that allow the adversary to gain knowledge about the characteristics of the mobile device and potentially other networked systems. When adversaries gain access to a new system, they must orient themselves to what they now have control of and what benefits operating from that system give to their current objective or overall goals during the intrusion. The operating system may provide capabilities that aid in this post-compromise information-gathering phase.",
                    "techniques": [
                        {
                            "description": "Adversaries may track a device\u2019s physical location through use of standard operating system APIs via malicious or exploited applications on the compromised device. \nOn Android, applications holding the ACCESS_COAURSE_LOCATION or ACCESS_FINE_LOCATION permissions provide access to the device\u2019s physical location. On Android 10 and up, declaration of the ACCESS_BACKGROUND_LOCATION permission in an application\u2019s manifest will allow applications to request location access even when the application is running in the background. Some adversaries have utilized integration of Baidu map services to retrieve geographical location once the location access permissions had been obtained. \nOn iOS, applications must include the NSLocationWhenInUseUsageDescription, NSLocationAlwaysAndWhenInUseUsageDescription, and/or NSLocationAlwaysUsageDescription keys in their Info.plist file depending on the extent of requested access to location information. On iOS 8.0 and up, applications call requestWhenInUseAuthorization() to request access to location information when the application is in use or requestAlwaysAuthorization() to request access to location information regardless of whether the application is in use. With elevated privileges, an adversary may be able to access location data without explicit user consent with the com.apple.locationd.preauthorized entitlement key.",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Has permission to query the current location"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Queries the phones location (GPS)"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1430/",
                            "id": "T1430",
                            "name": "Location Tracking"
                        },
                        {
                            "description": "Adversaries may attempt to get information about running processes on a device. Information obtained could be used to gain an understanding of common software/applications running on devices within a network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. \nRecent Android security enhancements have made it more difficult to obtain a list of running processes. On Android 7 and later, there is no way for an application to obtain the process list without abusing elevated privileges. This is due to the Android kernel utilizing the hidepid mount feature. Prior to Android 7, applications could utilize the ps command or examine the /proc directory on the device. \nIn iOS, applications have previously been able to use the sysctl command to obtain a list of running processes. This functionality has been removed in later iOS versions. ",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Queries list of running processes/tasks"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1424/",
                            "id": "T1424",
                            "name": "Process Discovery"
                        },
                        {
                            "description": "Adversaries may attempt to get detailed information about a device\u2019s operating system and hardware, including versions, patches, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not to fully infects the target and/or attempts specific actions. \nOn Android, much of this information is programmatically accessible to applications through the android.os.Build class.  iOS is much more restrictive with what information is visible to applications. Typically, applications will only be able to query the device model and which version of iOS it is running. ",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Queries several sensitive phone informations"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1426/",
                            "id": "T1426",
                            "name": "System Information Discovery"
                        },
                        {
                            "description": "Adversaries may attempt to get a listing of network connections to or from the compromised device they are currently accessing or from remote systems by querying for information over the network. \nThis is typically accomplished by utilizing device APIs to collect information about nearby networks, such as Wi-Fi, Bluetooth, and cellular tower connections. On Android, this can be done by querying the respective APIs: \n\n\nWifiInfo for information about the current Wi-Fi connection, as well as nearby Wi-Fi networks. Querying the WiFiInfo API requires the application to hold the ACCESS_FINE_LOCATION permission. \n\n\nBluetoothAdapter for information about Bluetooth devices, which also requires the application to hold several permissions granted by the user at runtime. \n\n\nFor Android versions prior to Q, applications can use the TelephonyManager.getNeighboringCellInfo() method. For Q and later, applications can use the TelephonyManager.getAllCellInfo() method. Both methods require the application hold the ACCESS_FINE_LOCATION permission.\n\n",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Checks an internet connection is available"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1421/",
                            "id": "T1421",
                            "name": "System Network Connections Discovery"
                        },
                        {
                            "description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of operating systems they access or through information discovery of remote systems. \nOn Android, details of onboard network interfaces are accessible to apps through the java.net.NetworkInterface class. Previously, the Android TelephonyManager class could be used to gather telephony-related device identifiers, information such as the IMSI, IMEI, and phone number. However, starting with Android 10, only preloaded, carrier, the default SMS, or device and profile owner applications can access the telephony-related device identifiers. \nOn iOS, gathering network configuration information is not possible without root access. \nAdversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. ",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Queries the SIM provider numeric MCC+MNC (mobile country code + mobile network code)"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Checks if a SIM card is installed"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1422/",
                            "id": "T1422",
                            "name": "System Network Configuration Discovery"
                        }
                    ],
                    "link": "https://attack.mitre.org/tactics/TA0032/",
                    "id": "TA0032",
                    "name": "Discovery"
                },
                {
                    "description": "The adversary is trying to intercept or manipulate network traffic to or from a device.\n\nThis category refers to network-based techniques that an adversary may be able to use to fulfill his or her objectives without access to the mobile device itself. These include techniques to intercept or manipulate network traffic to and from the mobile device.",
                    "techniques": [
                        {
                            "description": "An adversary could exploit signaling system vulnerabilities to redirect calls or text messages (SMS) to a phone number under the attacker's control. The adversary could then act as an adversary-in-the-middle to intercept or manipulate the communication.      Interception of SMS messages could enable adversaries to obtain authentication codes used for multi-factor authentication.",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Has permission to perform phone calls in the background"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1449/",
                            "id": "T1449",
                            "name": "Exploit SS7 to Redirect Phone Calls/SMS"
                        }
                    ],
                    "link": "https://attack.mitre.org/tactics/TA0038/",
                    "id": "TA0038",
                    "name": "Network Effects"
                },
                {
                    "description": "The adversary is trying to steal account names, passwords, or other secrets that enable access to resources.\n\nCredential access represents techniques that can be used by adversaries to obtain access to or control over passwords, tokens, cryptographic keys, or other values that could be used by an adversary to gain unauthorized access to resources. Credential access allows the adversary to assume the identity of an account, with all of that account's permissions on the system and network, and makes it harder for defenders to detect the adversary. With sufficient access within a network, an adversary can create accounts for later use within the environment.",
                    "techniques": [
                        {
                            "description": "Adversaries may try to access and collect application data resident on the device. Adversaries often target popular applications, such as Facebook, WeChat, and Gmail. \nDue to mobile OS sandboxing, this technique is only possible in three scenarios: \n\nAn application stores files in unprotected external storage \nAn application stores files in its internal storage directory with insecure permissions (e.g. 777) \nThe adversary gains root permissions on the device \n",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Queries stored mail and application accounts (e.g. Gmail or Whatsapp)"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1409/",
                            "id": "T1409",
                            "name": "Stored Application Data"
                        }
                    ],
                    "link": "https://attack.mitre.org/tactics/TA0031/",
                    "id": "TA0031",
                    "name": "Credential Access"
                },
                {
                    "description": "The adversary is trying to gather data of interest to their goal.\n\nCollection consists of techniques used to identify and gather information, such as sensitive files, from a target network prior to exfiltration. This category also covers locations on a system or network where the adversary may look for information to exfiltrate.",
                    "techniques": [
                        {
                            "description": "Adversaries may use device sensors to collect information about nearby networks, such as Wi-Fi and Bluetooth.",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Checks an internet connection is available"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Has permission to use Bluetooth to discover and pair with other devices"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Scans for Bluetooth devices"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1507/",
                            "id": "T1507",
                            "name": "Network Information Discovery"
                        },
                        {
                            "description": "Adversaries may try to access and collect application data resident on the device. Adversaries often target popular applications, such as Facebook, WeChat, and Gmail. \nDue to mobile OS sandboxing, this technique is only possible in three scenarios: \n\nAn application stores files in unprotected external storage \nAn application stores files in its internal storage directory with insecure permissions (e.g. 777) \nThe adversary gains root permissions on the device \n",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Queries stored mail and application accounts (e.g. Gmail or Whatsapp)"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1409/",
                            "id": "T1409",
                            "name": "Stored Application Data"
                        },
                        {
                            "description": "Adversaries may track a device\u2019s physical location through use of standard operating system APIs via malicious or exploited applications on the compromised device. \nOn Android, applications holding the ACCESS_COAURSE_LOCATION or ACCESS_FINE_LOCATION permissions provide access to the device\u2019s physical location. On Android 10 and up, declaration of the ACCESS_BACKGROUND_LOCATION permission in an application\u2019s manifest will allow applications to request location access even when the application is running in the background. Some adversaries have utilized integration of Baidu map services to retrieve geographical location once the location access permissions had been obtained. \nOn iOS, applications must include the NSLocationWhenInUseUsageDescription, NSLocationAlwaysAndWhenInUseUsageDescription, and/or NSLocationAlwaysUsageDescription keys in their Info.plist file depending on the extent of requested access to location information. On iOS 8.0 and up, applications call requestWhenInUseAuthorization() to request access to location information when the application is in use or requestAlwaysAuthorization() to request access to location information regardless of whether the application is in use. With elevated privileges, an adversary may be able to access location data without explicit user consent with the com.apple.locationd.preauthorized entitlement key.",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Has permission to query the current location"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Queries the phones location (GPS)"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1430/",
                            "id": "T1430",
                            "name": "Location Tracking"
                        },
                        {
                            "description": "An adversary could call standard operating system APIs from a malicious application to gather calendar entry data, or with escalated privileges could directly access files containing calendar data.",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Queries calendar entries"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1435/",
                            "id": "T1435",
                            "name": "Access Calendar Entries"
                        },
                        {
                            "description": "Adversaries may capture audio to collect information by leveraging standard operating system APIs of a mobile device. Examples of audio information adversaries may target include user conversations, surroundings, phone calls, or other sensitive information. \nAndroid and iOS, by default, require that applications request device microphone access from the user.  \nOn Android devices, applications must hold the RECORD_AUDIO permission to access the microphone or the CAPTURE_AUDIO_OUTPUT permission to access audio output. Because Android does not allow third-party applications to hold the CAPTURE_AUDIO_OUTPUT permission by default, only privileged applications, such as those distributed by Google or the device vendor, can access audio output. However, adversaries may be able to gain this access after successfully elevating their privileges. With the CAPTURE_AUDIO_OUTPUT permission, adversaries may pass the MediaRecorder.AudioSource.VOICE_CALL constant to MediaRecorder.setAudioOutput, allowing capture of both voice call uplink and downlink. \nOn iOS devices, applications must include the NSMicrophoneUsageDescription key in their Info.plist file to access the microphone.",
                            "signatures": [
                                {
                                    "severity": "INFO",
                                    "description": "Records audio/media"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Has permission to record audio in the background"
                                },
                                {
                                    "severity": "INFO",
                                    "description": "Accesses the audio/media managers"
                                }
                            ],
                            "link": "https://attack.mitre.org/techniques/T1429/",
                            "id": "T1429",
                            "name": "Audio Capture"
                        }
                    ],
                    "link": "https://attack.mitre.org/tactics/TA0035/",
                    "id": "TA0035",
                    "name": "Collection"
                }
            ]
        }
    },
    "links": {
        "self": "https://www.virustotal.com/api/v3/files/909985cabd5800714e2734e40e78b1fb7289580473165cc8492820c052537d39/behaviour_mitre_trees"
    }
}